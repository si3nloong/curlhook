// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookServiceClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (WebhookService_WatchClient, error)
	SendWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error)
	GetWebhooks(ctx context.Context, in *GetWebhooksRequest, opts ...grpc.CallOption) (WebhookService_GetWebhooksClient, error)
	FindWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error)
	RetryWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/protobuf.WebhookService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (WebhookService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebhookService_ServiceDesc.Streams[0], "/protobuf.WebhookService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &webhookServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebhookService_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type webhookServiceWatchClient struct {
	grpc.ClientStream
}

func (x *webhookServiceWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webhookServiceClient) SendWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error) {
	out := new(SendWebhookResponse)
	err := c.cc.Invoke(ctx, "/protobuf.WebhookService/SendWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) GetWebhooks(ctx context.Context, in *GetWebhooksRequest, opts ...grpc.CallOption) (WebhookService_GetWebhooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebhookService_ServiceDesc.Streams[1], "/protobuf.WebhookService/GetWebhooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &webhookServiceGetWebhooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebhookService_GetWebhooksClient interface {
	Recv() (*GetWebhooksResponse, error)
	grpc.ClientStream
}

type webhookServiceGetWebhooksClient struct {
	grpc.ClientStream
}

func (x *webhookServiceGetWebhooksClient) Recv() (*GetWebhooksResponse, error) {
	m := new(GetWebhooksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webhookServiceClient) FindWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error) {
	out := new(SendWebhookResponse)
	err := c.cc.Invoke(ctx, "/protobuf.WebhookService/FindWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) RetryWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*SendWebhookResponse, error) {
	out := new(SendWebhookResponse)
	err := c.cc.Invoke(ctx, "/protobuf.WebhookService/RetryWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations must embed UnimplementedWebhookServiceServer
// for forward compatibility
type WebhookServiceServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, WebhookService_WatchServer) error
	SendWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error)
	GetWebhooks(*GetWebhooksRequest, WebhookService_GetWebhooksServer) error
	FindWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error)
	RetryWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error)
	mustEmbedUnimplementedWebhookServiceServer()
}

// UnimplementedWebhookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServiceServer struct {
}

func (UnimplementedWebhookServiceServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedWebhookServiceServer) Watch(*HealthCheckRequest, WebhookService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedWebhookServiceServer) SendWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) GetWebhooks(*GetWebhooksRequest, WebhookService_GetWebhooksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWebhooks not implemented")
}
func (UnimplementedWebhookServiceServer) FindWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) RetryWebhook(context.Context, *SendWebhookRequest) (*SendWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) mustEmbedUnimplementedWebhookServiceServer() {}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WebhookService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebhookServiceServer).Watch(m, &webhookServiceWatchServer{stream})
}

type WebhookService_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type webhookServiceWatchServer struct {
	grpc.ServerStream
}

func (x *webhookServiceWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WebhookService_SendWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).SendWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WebhookService/SendWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).SendWebhook(ctx, req.(*SendWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_GetWebhooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWebhooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebhookServiceServer).GetWebhooks(m, &webhookServiceGetWebhooksServer{stream})
}

type WebhookService_GetWebhooksServer interface {
	Send(*GetWebhooksResponse) error
	grpc.ServerStream
}

type webhookServiceGetWebhooksServer struct {
	grpc.ServerStream
}

func (x *webhookServiceGetWebhooksServer) Send(m *GetWebhooksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WebhookService_FindWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).FindWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WebhookService/FindWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).FindWebhook(ctx, req.(*SendWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_RetryWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).RetryWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WebhookService/RetryWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).RetryWebhook(ctx, req.(*SendWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _WebhookService_Check_Handler,
		},
		{
			MethodName: "SendWebhook",
			Handler:    _WebhookService_SendWebhook_Handler,
		},
		{
			MethodName: "FindWebhook",
			Handler:    _WebhookService_FindWebhook_Handler,
		},
		{
			MethodName: "RetryWebhook",
			Handler:    _WebhookService_RetryWebhook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _WebhookService_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWebhooks",
			Handler:       _WebhookService_GetWebhooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "webhook.proto",
}
